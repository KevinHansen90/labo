require("data.table")
#------------------------------------------------------------------------------
#Función para verificar si acierto en la decisión
decision  <- function( pid )
{
return( list("tiros_total"= GLOBAL_tiros_total,
"acierto"=     as.integer( GLOBAL_jugadores[pid]==0.7) ))
}
#------------------------------------------------------------------------------
#Función para tirar
ftirar  <- function( prob, qty )
{
return( sum( runif(qty) < prob ) )
}
#------------------------------------------------------------------------------
#Inicializo variables
GLOBAL_iteracion <- 0
GLOBAL_jugadores  <-  sample( c( (501:599 )/1000 , 0.7 ) )
GLOBAL_tiros_total  <- 0
GLOBAL_tiros_max  <- 15000
ids_juegan <- 1:100
n_rondas <- 0
target_aciertos_consec <- 10
target_errados_consec <-  7
tiros_porcentaje <- 0.5
tiros_ronda <- round((GLOBAL_tiros_max-GLOBAL_tiros_total)/length(ids_juegan)*tiros_porcentaje)
planilla <- data.table( "id"= 1:100 )
planilla  <-planilla[ ids_juegan,  tiros:= 0]
planilla  <-planilla[ ids_juegan,  aciertos:= 0]
planilla  <-planilla[ ids_juegan,  aciertos_consec:= 0]
planilla  <-planilla[ ids_juegan,  errados_consec:= 0]
planilla  <-planilla[ ids_juegan,  pasa_ronda:= 0]
planilla  <-planilla[ ids_juegan,  aciertos_acum:=0]
#------------------------------------------------------------------------------
#Función para jugar
jugar <- function()
{
while(GLOBAL_tiros_total<GLOBAL_tiros_max & tiros_ronda>20)
{
planilla  <-planilla[ ids_juegan,tiros:= 0]
planilla  <-planilla[ ids_juegan,aciertos:= 0]
planilla  <-planilla[ ids_juegan,aciertos_consec:= 0]
planilla  <-planilla[ ids_juegan,errados_consec:= 0]
planilla  <-planilla[ ids_juegan,pasa_ronda:= 0]
planilla  <-planilla[ -ids_juegan,tiros:= NA]
planilla  <-planilla[ -ids_juegan,aciertos:= NA]
planilla  <-planilla[ -ids_juegan,aciertos_consec:= NA]
planilla  <-planilla[ -ids_juegan,errados_consec:= NA]
planilla  <-planilla[ -ids_juegan,pasa_ronda:= NA]
for (i in 1:tiros_ronda)
{
res <- 0
res <- mapply(ftirar, GLOBAL_jugadores[ids_juegan], 1 )
planilla <- planilla[ids_juegan,tiros:= tiros+1] #anoto tiros
planilla <- planilla[ids_juegan[which(res==1)],aciertos:= aciertos+1] #anoto aciertos
planilla <- planilla[ids_juegan[which(res==1)],aciertos_consec:=aciertos_consec+1] #anoto aciertos consec
planilla <- planilla[ids_juegan[which(res==0)],  aciertos_consec:= 0] #anoto aciertos consec
planilla <- planilla[ids_juegan[which(res==0)],  errados_consec:= errados_consec+1] #anoto errados consec
planilla <- planilla[ids_juegan[which(res==1)],  errados_consec:= 0] #anoto errados consec
planilla <- planilla[aciertos_consec==target_aciertos_consec,  pasa_ronda:= 1] #paso ronda
ids_juegan <- planilla[errados_consec<target_errados_consec & aciertos_consec<target_aciertos_consec,id]
}
GLOBAL_tiros_total  <- GLOBAL_tiros_total+sum(planilla[tiros>0,tiros])
planilla  <-planilla[pasa_ronda==1,  aciertos_acum:= aciertos_acum+tiros_ronda*0.7]
mediana <- planilla[pasa_ronda==0 & errados_consec<target_errados_consec,median(aciertos)]
planilla <- planilla[pasa_ronda==0 & errados_consec<target_errados_consec & mediana<aciertos,aciertos_acum:= aciertos_acum+aciertos]
planilla <- planilla[pasa_ronda==0 & errados_consec<target_errados_consec & mediana<aciertos,pasa_ronda:=1]
ids_juegan <- planilla[pasa_ronda==1,id]
n_rondas <- n_rondas+1
tiros_ronda <- round((GLOBAL_tiros_max-GLOBAL_tiros_total)/length(ids_juegan)*tiros_porcentaje)
}
pos_mejor <-  planilla[ , which.max(aciertos_acum) ]
id_mejor  <-  planilla[ pos_mejor, id ]
fin_juego <- decision(id_mejor)
print(n_rondas)
print(planilla[,id])
return(list("tiros_total"= GLOBAL_tiros_total,
"acierto"=     as.integer( GLOBAL_jugadores[id_mejor]==0.7)))
}
#------------------------------------------------------------------------------
#Función para repetir experimento
ganador  <- function()
{
GLOBAL_iteracion  <<- GLOBAL_iteracion + 1
tabla_veredictos  <- data.table(  tiros_total=integer(),  acierto=integer() )
for( experimento  in  1:10000 )
{
if( experimento %% 1000 == 0 )  cat( experimento, " ")  #desprolijo, pero es para saber por donde voy
veredicto  <- jugar()
tabla_veredictos  <- rbind( tabla_veredictos, veredicto )
}
cat("\n")
tiros_total  <-  tabla_veredictos[  , max(tiros_total) ]
tasa_eleccion_correcta  <-  tabla_veredictos[  , mean(acierto) ]
return(tasa_eleccion_correcta)
}
#------------------------------------------------------------------------------
#Experimento
set.seed(111599)
jugar()
#limpio la memoria
rm( list=ls() )
gc()
require("data.table")
#------------------------------------------------------------------------------
#Función para verificar si acierto en la decisión
decision  <- function( pid )
{
return( list("tiros_total"= GLOBAL_tiros_total,
"acierto"=     as.integer( GLOBAL_jugadores[pid]==0.7) ))
}
#------------------------------------------------------------------------------
#Función para tirar
ftirar  <- function( prob, qty )
{
return( sum( runif(qty) < prob ) )
}
#------------------------------------------------------------------------------
#Inicializo variables
GLOBAL_iteracion <- 0
GLOBAL_jugadores  <-  sample( c( (501:599 )/1000 , 0.7 ) )
GLOBAL_tiros_total  <- 0
GLOBAL_tiros_max  <- 15000
ids_juegan <- 1:100
n_rondas <- 0
target_aciertos_consec <- 8
target_errados_consec <-  7
tiros_porcentaje <- 0.9
tiros_ronda <- round((GLOBAL_tiros_max-GLOBAL_tiros_total)/length(ids_juegan)*tiros_porcentaje)
planilla <- data.table( "id"= 1:100 )
planilla  <-planilla[ ids_juegan,  tiros:= 0]
planilla  <-planilla[ ids_juegan,  aciertos:= 0]
planilla  <-planilla[ ids_juegan,  aciertos_consec:= 0]
planilla  <-planilla[ ids_juegan,  errados_consec:= 0]
planilla  <-planilla[ ids_juegan,  pasa_ronda:= 0]
planilla  <-planilla[ ids_juegan,  aciertos_acum:=0]
#------------------------------------------------------------------------------
#Función para jugar
jugar <- function()
{
while(GLOBAL_tiros_total<GLOBAL_tiros_max & tiros_ronda>20)
{
planilla  <-planilla[ ids_juegan,tiros:= 0]
planilla  <-planilla[ ids_juegan,aciertos:= 0]
planilla  <-planilla[ ids_juegan,aciertos_consec:= 0]
planilla  <-planilla[ ids_juegan,errados_consec:= 0]
planilla  <-planilla[ ids_juegan,pasa_ronda:= 0]
planilla  <-planilla[ -ids_juegan,tiros:= NA]
planilla  <-planilla[ -ids_juegan,aciertos:= NA]
planilla  <-planilla[ -ids_juegan,aciertos_consec:= NA]
planilla  <-planilla[ -ids_juegan,errados_consec:= NA]
planilla  <-planilla[ -ids_juegan,pasa_ronda:= NA]
for (i in 1:tiros_ronda)
{
res <- 0
res <- mapply(ftirar, GLOBAL_jugadores[ids_juegan], 1 )
planilla <- planilla[ids_juegan,tiros:= tiros+1] #anoto tiros
planilla <- planilla[ids_juegan[which(res==1)],aciertos:= aciertos+1] #anoto aciertos
planilla <- planilla[ids_juegan[which(res==1)],aciertos_consec:=aciertos_consec+1] #anoto aciertos consec
planilla <- planilla[ids_juegan[which(res==0)],  aciertos_consec:= 0] #anoto aciertos consec
planilla <- planilla[ids_juegan[which(res==0)],  errados_consec:= errados_consec+1] #anoto errados consec
planilla <- planilla[ids_juegan[which(res==1)],  errados_consec:= 0] #anoto errados consec
planilla <- planilla[aciertos_consec==target_aciertos_consec,  pasa_ronda:= 1] #paso ronda
ids_juegan <- planilla[errados_consec<target_errados_consec & aciertos_consec<target_aciertos_consec,id]
}
GLOBAL_tiros_total  <- GLOBAL_tiros_total+sum(planilla[tiros>0,tiros])
planilla  <-planilla[pasa_ronda==1,  aciertos_acum:= aciertos_acum+tiros_ronda*0.7]
mediana <- planilla[pasa_ronda==0 & errados_consec<target_errados_consec,median(aciertos)]
planilla <- planilla[pasa_ronda==0 & errados_consec<target_errados_consec & mediana<aciertos,aciertos_acum:= aciertos_acum+aciertos]
planilla <- planilla[pasa_ronda==0 & errados_consec<target_errados_consec & mediana<aciertos,pasa_ronda:=1]
ids_juegan <- planilla[pasa_ronda==1,id]
n_rondas <- n_rondas+1
tiros_ronda <- round((GLOBAL_tiros_max-GLOBAL_tiros_total)/length(ids_juegan)*tiros_porcentaje)
}
pos_mejor <-  planilla[ , which.max(aciertos_acum) ]
id_mejor  <-  planilla[ pos_mejor, id ]
fin_juego <- decision(id_mejor)
print(n_rondas)
print(planilla[,id])
return(list("tiros_total"= GLOBAL_tiros_total,
"acierto"=     as.integer( GLOBAL_jugadores[id_mejor]==0.7)))
}
#------------------------------------------------------------------------------
#Función para repetir experimento
ganador  <- function()
{
GLOBAL_iteracion  <<- GLOBAL_iteracion + 1
tabla_veredictos  <- data.table(  tiros_total=integer(),  acierto=integer() )
for( experimento  in  1:10000 )
{
if( experimento %% 1000 == 0 )  cat( experimento, " ")  #desprolijo, pero es para saber por donde voy
veredicto  <- jugar()
tabla_veredictos  <- rbind( tabla_veredictos, veredicto )
}
cat("\n")
tiros_total  <-  tabla_veredictos[  , max(tiros_total) ]
tasa_eleccion_correcta  <-  tabla_veredictos[  , mean(acierto) ]
return(tasa_eleccion_correcta)
}
#------------------------------------------------------------------------------
#Experimento
set.seed(111599)
jugar()
#limpio la memoria
rm( list=ls() )
gc()
require("data.table")
#------------------------------------------------------------------------------
#Función para verificar si acierto en la decisión
decision  <- function( pid )
{
return( list("tiros_total"= GLOBAL_tiros_total,
"acierto"=     as.integer( GLOBAL_jugadores[pid]==0.7) ))
}
#------------------------------------------------------------------------------
#Función para tirar
ftirar  <- function( prob, qty )
{
return( sum( runif(qty) < prob ) )
}
#------------------------------------------------------------------------------
#Inicializo variables
GLOBAL_iteracion <- 0
GLOBAL_jugadores  <-  sample( c( (501:599 )/1000 , 0.7 ) )
GLOBAL_tiros_total  <- 0
GLOBAL_tiros_max  <- 15000
ids_juegan <- 1:100
n_rondas <- 0
target_aciertos_consec <- 8
target_errados_consec <-  7
tiros_porcentaje <- 0.9
tiros_ronda <- round((GLOBAL_tiros_max-GLOBAL_tiros_total)/length(ids_juegan)*tiros_porcentaje)
planilla <- data.table( "id"= 1:100 )
planilla  <-planilla[ ids_juegan,  tiros:= 0]
planilla  <-planilla[ ids_juegan,  aciertos:= 0]
planilla  <-planilla[ ids_juegan,  aciertos_consec:= 0]
planilla  <-planilla[ ids_juegan,  errados_consec:= 0]
planilla  <-planilla[ ids_juegan,  pasa_ronda:= 0]
planilla  <-planilla[ ids_juegan,  aciertos_acum:=0]
#------------------------------------------------------------------------------
#Función para jugar
jugar <- function()
{
while(GLOBAL_tiros_total<GLOBAL_tiros_max & tiros_ronda>20)
{
planilla  <-planilla[ ids_juegan,tiros:= 0]
planilla  <-planilla[ ids_juegan,aciertos:= 0]
planilla  <-planilla[ ids_juegan,aciertos_consec:= 0]
planilla  <-planilla[ ids_juegan,errados_consec:= 0]
planilla  <-planilla[ ids_juegan,pasa_ronda:= 0]
planilla  <-planilla[ -ids_juegan,tiros:= NA]
planilla  <-planilla[ -ids_juegan,aciertos:= NA]
planilla  <-planilla[ -ids_juegan,aciertos_consec:= NA]
planilla  <-planilla[ -ids_juegan,errados_consec:= NA]
planilla  <-planilla[ -ids_juegan,pasa_ronda:= NA]
for (i in 1:tiros_ronda)
{
res <- 0
res <- mapply(ftirar, GLOBAL_jugadores[ids_juegan], 1 )
planilla <- planilla[ids_juegan,tiros:= tiros+1] #anoto tiros
planilla <- planilla[ids_juegan[which(res==1)],aciertos:= aciertos+1] #anoto aciertos
planilla <- planilla[ids_juegan[which(res==1)],aciertos_consec:=aciertos_consec+1] #anoto aciertos consec
planilla <- planilla[ids_juegan[which(res==0)],  aciertos_consec:= 0] #anoto aciertos consec
planilla <- planilla[ids_juegan[which(res==0)],  errados_consec:= errados_consec+1] #anoto errados consec
planilla <- planilla[ids_juegan[which(res==1)],  errados_consec:= 0] #anoto errados consec
planilla <- planilla[aciertos_consec==target_aciertos_consec,  pasa_ronda:= 1] #paso ronda
ids_juegan <- planilla[errados_consec<target_errados_consec & aciertos_consec<target_aciertos_consec,id]
}
GLOBAL_tiros_total  <- GLOBAL_tiros_total+sum(planilla[tiros>0,tiros])
planilla  <-planilla[pasa_ronda==1,  aciertos_acum:= aciertos_acum+tiros_ronda*0.7]
mediana <- planilla[pasa_ronda==0 & errados_consec<target_errados_consec,median(aciertos)]
planilla <- planilla[pasa_ronda==0 & errados_consec<target_errados_consec & mediana<aciertos,aciertos_acum:= aciertos_acum+aciertos]
planilla <- planilla[pasa_ronda==0 & errados_consec<target_errados_consec & mediana<aciertos,pasa_ronda:=1]
ids_juegan <- planilla[pasa_ronda==1,id]
n_rondas <- n_rondas+1
tiros_ronda <- round((GLOBAL_tiros_max-GLOBAL_tiros_total)/length(ids_juegan)*tiros_porcentaje)
}
pos_mejor <-  planilla[ , which.max(aciertos_acum) ]
id_mejor  <-  planilla[ pos_mejor, id ]
fin_juego <- decision(id_mejor)
print(n_rondas)
print(planilla[,id])
return(list("tiros_total"= GLOBAL_tiros_total,
"acierto"=     as.integer( GLOBAL_jugadores[id_mejor]==0.7)))
}
#------------------------------------------------------------------------------
#Función para repetir experimento
ganador  <- function()
{
GLOBAL_iteracion  <<- GLOBAL_iteracion + 1
tabla_veredictos  <- data.table(  tiros_total=integer(),  acierto=integer() )
for( experimento  in  1:10000 )
{
if( experimento %% 1000 == 0 )  cat( experimento, " ")  #desprolijo, pero es para saber por donde voy
veredicto  <- jugar()
tabla_veredictos  <- rbind( tabla_veredictos, veredicto )
}
cat("\n")
tiros_total  <-  tabla_veredictos[  , max(tiros_total) ]
tasa_eleccion_correcta  <-  tabla_veredictos[  , mean(acierto) ]
return(tasa_eleccion_correcta)
}
#------------------------------------------------------------------------------
#Experimento
set.seed(111599)
jugar()
#limpio la memoria
rm( list=ls() )
gc()
require("data.table")
#------------------------------------------------------------------------------
#Función para verificar si acierto en la decisión
decision  <- function( pid )
{
return( list("tiros_total"= GLOBAL_tiros_total,
"acierto"=     as.integer( GLOBAL_jugadores[pid]==0.7) ))
}
#------------------------------------------------------------------------------
#Función para tirar
ftirar  <- function( prob, qty )
{
return( sum( runif(qty) < prob ) )
}
#------------------------------------------------------------------------------
#Inicializo variables
GLOBAL_iteracion <- 0
GLOBAL_jugadores  <-  sample( c( (501:599 )/1000 , 0.7 ) )
GLOBAL_tiros_total  <- 0
GLOBAL_tiros_max  <- 15000
ids_juegan <- 1:100
n_rondas <- 0
target_aciertos_consec <- 8
target_errados_consec <-  7
tiros_porcentaje <- 0.7
tiros_ronda <- round((GLOBAL_tiros_max-GLOBAL_tiros_total)/length(ids_juegan)*tiros_porcentaje)
planilla <- data.table( "id"= 1:100 )
planilla  <-planilla[ ids_juegan,  tiros:= 0]
planilla  <-planilla[ ids_juegan,  aciertos:= 0]
planilla  <-planilla[ ids_juegan,  aciertos_consec:= 0]
planilla  <-planilla[ ids_juegan,  errados_consec:= 0]
planilla  <-planilla[ ids_juegan,  pasa_ronda:= 0]
planilla  <-planilla[ ids_juegan,  aciertos_acum:=0]
#------------------------------------------------------------------------------
#Función para jugar
jugar <- function()
{
while(GLOBAL_tiros_total<GLOBAL_tiros_max & tiros_ronda>20)
{
planilla  <-planilla[ ids_juegan,tiros:= 0]
planilla  <-planilla[ ids_juegan,aciertos:= 0]
planilla  <-planilla[ ids_juegan,aciertos_consec:= 0]
planilla  <-planilla[ ids_juegan,errados_consec:= 0]
planilla  <-planilla[ ids_juegan,pasa_ronda:= 0]
planilla  <-planilla[ -ids_juegan,tiros:= NA]
planilla  <-planilla[ -ids_juegan,aciertos:= NA]
planilla  <-planilla[ -ids_juegan,aciertos_consec:= NA]
planilla  <-planilla[ -ids_juegan,errados_consec:= NA]
planilla  <-planilla[ -ids_juegan,pasa_ronda:= NA]
for (i in 1:tiros_ronda)
{
res <- 0
res <- mapply(ftirar, GLOBAL_jugadores[ids_juegan], 1 )
planilla <- planilla[ids_juegan,tiros:= tiros+1] #anoto tiros
planilla <- planilla[ids_juegan[which(res==1)],aciertos:= aciertos+1] #anoto aciertos
planilla <- planilla[ids_juegan[which(res==1)],aciertos_consec:=aciertos_consec+1] #anoto aciertos consec
planilla <- planilla[ids_juegan[which(res==0)],  aciertos_consec:= 0] #anoto aciertos consec
planilla <- planilla[ids_juegan[which(res==0)],  errados_consec:= errados_consec+1] #anoto errados consec
planilla <- planilla[ids_juegan[which(res==1)],  errados_consec:= 0] #anoto errados consec
planilla <- planilla[aciertos_consec==target_aciertos_consec,  pasa_ronda:= 1] #paso ronda
ids_juegan <- planilla[errados_consec<target_errados_consec & aciertos_consec<target_aciertos_consec,id]
}
GLOBAL_tiros_total  <- GLOBAL_tiros_total+sum(planilla[tiros>0,tiros])
planilla  <-planilla[pasa_ronda==1,  aciertos_acum:= aciertos_acum+tiros_ronda*0.7]
mediana <- planilla[pasa_ronda==0 & errados_consec<target_errados_consec,median(aciertos)]
planilla <- planilla[pasa_ronda==0 & errados_consec<target_errados_consec & mediana<aciertos,aciertos_acum:= aciertos_acum+aciertos]
planilla <- planilla[pasa_ronda==0 & errados_consec<target_errados_consec & mediana<aciertos,pasa_ronda:=1]
ids_juegan <- planilla[pasa_ronda==1,id]
n_rondas <- n_rondas+1
tiros_ronda <- round((GLOBAL_tiros_max-GLOBAL_tiros_total)/length(ids_juegan)*tiros_porcentaje)
}
pos_mejor <-  planilla[ , which.max(aciertos_acum) ]
id_mejor  <-  planilla[ pos_mejor, id ]
fin_juego <- decision(id_mejor)
print(n_rondas)
print(planilla[,id])
return(list("tiros_total"= GLOBAL_tiros_total,
"acierto"=     as.integer( GLOBAL_jugadores[id_mejor]==0.7)))
}
#------------------------------------------------------------------------------
#Función para repetir experimento
ganador  <- function()
{
GLOBAL_iteracion  <<- GLOBAL_iteracion + 1
tabla_veredictos  <- data.table(  tiros_total=integer(),  acierto=integer() )
for( experimento  in  1:10000 )
{
if( experimento %% 1000 == 0 )  cat( experimento, " ")  #desprolijo, pero es para saber por donde voy
veredicto  <- jugar()
tabla_veredictos  <- rbind( tabla_veredictos, veredicto )
}
cat("\n")
tiros_total  <-  tabla_veredictos[  , max(tiros_total) ]
tasa_eleccion_correcta  <-  tabla_veredictos[  , mean(acierto) ]
return(tasa_eleccion_correcta)
}
#------------------------------------------------------------------------------
#Experimento
set.seed(111599)
jugar()
#limpio la memoria
rm( list=ls() )
gc()
require("data.table")
#------------------------------------------------------------------------------
#Función para verificar si acierto en la decisión
decision  <- function( pid )
{
return( list("tiros_total"= GLOBAL_tiros_total,
"acierto"=     as.integer( GLOBAL_jugadores[pid]==0.7) ))
}
#------------------------------------------------------------------------------
#Función para tirar
ftirar  <- function( prob, qty )
{
return( sum( runif(qty) < prob ) )
}
#------------------------------------------------------------------------------
#Inicializo variables
GLOBAL_iteracion <- 0
GLOBAL_jugadores  <-  sample( c( (501:599 )/1000 , 0.7 ) )
GLOBAL_tiros_total  <- 0
GLOBAL_tiros_max  <- 15000
ids_juegan <- 1:100
n_rondas <- 0
target_aciertos_consec <- 9
target_errados_consec <-  7
tiros_porcentaje <- 0.7
tiros_ronda <- round((GLOBAL_tiros_max-GLOBAL_tiros_total)/length(ids_juegan)*tiros_porcentaje)
planilla <- data.table( "id"= 1:100 )
planilla  <-planilla[ ids_juegan,  tiros:= 0]
planilla  <-planilla[ ids_juegan,  aciertos:= 0]
planilla  <-planilla[ ids_juegan,  aciertos_consec:= 0]
planilla  <-planilla[ ids_juegan,  errados_consec:= 0]
planilla  <-planilla[ ids_juegan,  pasa_ronda:= 0]
planilla  <-planilla[ ids_juegan,  aciertos_acum:=0]
#------------------------------------------------------------------------------
#Función para jugar
jugar <- function()
{
while(GLOBAL_tiros_total<GLOBAL_tiros_max & tiros_ronda>20)
{
planilla  <-planilla[ ids_juegan,tiros:= 0]
planilla  <-planilla[ ids_juegan,aciertos:= 0]
planilla  <-planilla[ ids_juegan,aciertos_consec:= 0]
planilla  <-planilla[ ids_juegan,errados_consec:= 0]
planilla  <-planilla[ ids_juegan,pasa_ronda:= 0]
planilla  <-planilla[ -ids_juegan,tiros:= NA]
planilla  <-planilla[ -ids_juegan,aciertos:= NA]
planilla  <-planilla[ -ids_juegan,aciertos_consec:= NA]
planilla  <-planilla[ -ids_juegan,errados_consec:= NA]
planilla  <-planilla[ -ids_juegan,pasa_ronda:= NA]
for (i in 1:tiros_ronda)
{
res <- 0
res <- mapply(ftirar, GLOBAL_jugadores[ids_juegan], 1 )
planilla <- planilla[ids_juegan,tiros:= tiros+1] #anoto tiros
planilla <- planilla[ids_juegan[which(res==1)],aciertos:= aciertos+1] #anoto aciertos
planilla <- planilla[ids_juegan[which(res==1)],aciertos_consec:=aciertos_consec+1] #anoto aciertos consec
planilla <- planilla[ids_juegan[which(res==0)],  aciertos_consec:= 0] #anoto aciertos consec
planilla <- planilla[ids_juegan[which(res==0)],  errados_consec:= errados_consec+1] #anoto errados consec
planilla <- planilla[ids_juegan[which(res==1)],  errados_consec:= 0] #anoto errados consec
planilla <- planilla[aciertos_consec==target_aciertos_consec,  pasa_ronda:= 1] #paso ronda
ids_juegan <- planilla[errados_consec<target_errados_consec & aciertos_consec<target_aciertos_consec,id]
}
GLOBAL_tiros_total  <- GLOBAL_tiros_total+sum(planilla[tiros>0,tiros])
planilla  <-planilla[pasa_ronda==1,  aciertos_acum:= aciertos_acum+tiros_ronda*0.7]
mediana <- planilla[pasa_ronda==0 & errados_consec<target_errados_consec,median(aciertos)]
planilla <- planilla[pasa_ronda==0 & errados_consec<target_errados_consec & mediana<aciertos,aciertos_acum:= aciertos_acum+aciertos]
planilla <- planilla[pasa_ronda==0 & errados_consec<target_errados_consec & mediana<aciertos,pasa_ronda:=1]
ids_juegan <- planilla[pasa_ronda==1,id]
n_rondas <- n_rondas+1
tiros_ronda <- round((GLOBAL_tiros_max-GLOBAL_tiros_total)/length(ids_juegan)*tiros_porcentaje)
}
pos_mejor <-  planilla[ , which.max(aciertos_acum) ]
id_mejor  <-  planilla[ pos_mejor, id ]
fin_juego <- decision(id_mejor)
print(n_rondas)
print(planilla[,id])
return(list("tiros_total"= GLOBAL_tiros_total,
"acierto"=     as.integer( GLOBAL_jugadores[id_mejor]==0.7)))
}
#------------------------------------------------------------------------------
#Función para repetir experimento
ganador  <- function()
{
GLOBAL_iteracion  <<- GLOBAL_iteracion + 1
tabla_veredictos  <- data.table(  tiros_total=integer(),  acierto=integer() )
for( experimento  in  1:10000 )
{
if( experimento %% 1000 == 0 )  cat( experimento, " ")  #desprolijo, pero es para saber por donde voy
veredicto  <- jugar()
tabla_veredictos  <- rbind( tabla_veredictos, veredicto )
}
cat("\n")
tiros_total  <-  tabla_veredictos[  , max(tiros_total) ]
tasa_eleccion_correcta  <-  tabla_veredictos[  , mean(acierto) ]
return(tasa_eleccion_correcta)
}
#------------------------------------------------------------------------------
#Experimento
set.seed(111599)
jugar()
